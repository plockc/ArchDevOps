#!/bin/bash -i

# runremote
# Written by Chris Plock

# TODO: wikitize
# TODO: advertise
# TODO: tee option to capture output to disk, with or without merge, and with or without box names as a prefix in log output
# TODO: option to run serially straight to console instead of using multitail
# TODO: graceful degrade to serial execution if no dvtm or multitail
# TODO: option to dvtm instead of multitail, or screen

# try -a and -g options to send to console for further processing, maybe with no close_closed_windows and maybe with hostname

function usage() {
cat <<EOF
runremote: run the same commands on multiple boxes and observer or process output
Usage: $(basename "$0") [switches] [--] remoteHost [remoteHost2 ...]
      -f script          Provide a local script to be run on each remote machine
      -c command         Execute command on remote machine
      -x                 Close tail window for remote host after command completes,
                           and exit after the last closes
      -t remoteFileName  tail remote file/s (has to be done as one argument)
      -h                 This help
Hint: if you see end of file without any output, make sure you can ssh without problems
EOF
}

# we will default to leaving windows open
autoCloseWindows="no"

# leading ':' to run silent, 'f:' means f need an argument, 'c' is optional
while getopts ":f:t:c:x" opt; do case $opt in
	h)  usage; exit 0;;
	f)  if [[ ! -e "$OPTARG" ]]; then usage; echo "\$OPTARG does not exist for -f"; exit 1; fi
        cmdOptions="${cmdOptions}${opt}"; encodedCommands="$(<$OPTARG)";;
	x)  autoCloseWindows="yes";;
    c)  cmdOptions="${cmdOptions}${opt}"; encodedCommands="$OPTARG";;
	t)  cmdOptions="${cmdOptions}${opt}"; encodedCommands="tail -f $OPTARG";;
    \?) usage; echo -e "\nERROR: Invalid option: -$OPTARG" >&2; exit 1;;
        # this happens when silent and missing argument for option
	:)  usage; echo -e "\nERROR: -$OPTARG requires an argument" >&2; exit 1;;
esac; done

if (( ${#cmdOptions} > 1 )); then echo "You can only have one of -f, -c, or -t"; exit 1; fi

# consume the option flags and leave the list of server names to assign to "remoteBoxes"
shift $((OPTIND-1))
if (( $# == 0 )); then usage; echo "No remote boxes specified"; exit 1; fi

remoteBoxes="$@"

if [[ -z "${encodedCommands}" ]]; then ## true when unset or empty string
	if [[ -t 0 ]]; then # true if stdin is a terminal, if not, it was piped in
		echo "Enter commands you would like to be run remotely, then Ctl-d on a newline to finish" >&2
	else
		echo "multitail requires stdin to be a terminal/interactive, try to get your commands to look like a file, for example:"
		commands=$(cat)
		echo "  $(basename $0) -f /dev/fd/3 $remoteBoxes 3<<< \"${commands}\""
		echo "  $(basename $0) -f <(cat <<< \"${commands}\") $remoteBoxes"
		echo "  (cat <<< \"${commands}\" | 3>&0 $(basename $0) -f /dev/fd/3 $remoteBoxes <&4) 4>&0"
		exit 1;
	fi
	encodedCommands="$(cat)"
fi

CMD="multitail -M 5000 -o close_closed_windows:${autoCloseWindows}"
#CMD="dvtm"

for box in ${remoteBoxes}; do
    CMD=$(printf "%s -t %s -l 'ssh -T %s %q'" "$CMD" $box $box "$encodedCommands")
    #CMD=$(printf "%s 'ssh -t %s %q | less'" "$CMD" $box "$encodedCommands")
done
 
eval $CMD
